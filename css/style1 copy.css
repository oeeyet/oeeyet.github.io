body {
  margin: 0;
  font-family: "Amatic SC", cursive;
  font-family: "Song Myung", serif;
}
a {
  text-decoration: none;
  color: white;
}
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #2196f3;
  padding: 8px 12px;
}
.navbar__logo {
  font-size: 24px;
  color: white;
}
.navbar__menu {
  display: flex;
  list-style: none;
  padding-left: 0;
}
.navbar__menu li {
  padding: 8px 12px;
}
.navbar__menu li:hover {
  background-color: #83bff0;
  border-radius: 4px;
}
.navbar__icons {
  list-style: none;
  color: white;
  display: flex;
  padding-left: 0;
}
.navbar__icons li {
  padding: 8px 12px;
}
.navbar__toogleBtn {
  display: none;
  position: absolute;
  right: 32px;
  font-size: 24px;
  color: white;
}

@media screen and (max-width: 768px) {
  .navbar {
    flex-direction: column;
    align-items: flex-start;
    padding: 8px 24px;
  }
  .navbar__menu {
    display: none;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }
  .navbar__menu li {
    width: 100%;
    text-align: center;
  }
  .navbar__icons {
    display: none;
    justify-content: center;
    width: 100%;
  }
  .navbar__toogleBtn {
    display: block;
  }
  .navbar__menu.active,
  .navbar__icons.active {
    display: flex;
  }
  .main span {
    margin: 8px;
  }
  .title p {
    font-size: 30px;
  }
  section {
    width: auto;
  }
}
.title {
  text-align: center;
  font-size: 3.5rem;
  font-weight: bold;
}
.subtitle {
  font-size: 1.25rem;
  font-weight: 300;
  margin: 20px;
  text-align: center;
}
.subtitle span {
  margin: 20px;
}

.main {
  max-width: 1200px;
  margin: 0 auto;
  margin-top: 60px;
}
section {
  position: relative;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #2c89d4;
  overflow: hidden;
}
.swiper-container {
  width: 100%;
  padding-top: 20px;
  padding-bottom: 20px;
  max-width: 1000px;
}

.swiper-slide {
  background-position: center;
  background-size: cover;
  width: 320px;
  box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2);
  filter: blur(4px);
  background: #d1ebff;
  border-radius: 10px;
}
.swiper-slide-active {
  filter: blur(0px);
  background: #fff;
}
.testimonialBox {
  position: relative;
  width: 100%;
  height: 500px;
  padding: 40px;
  padding-top: 90px;
  color: #999;
}
/* .testimonialBox .quote {
  position: absolute;
  top: 20px;
  right: 30px;
  opacity: 0.2;
} */
.testimonialBox .details {
  display: flex;
  align-items: center;
  margin-top: 20px;
}
.testimonialBox .details .imgBx {
  position: relative;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  overflow: hidden;
  margin-right: 10px;
}
.testimonialBox .details .imgBx img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.testimonialBox .details h3 {
  font-size: 16px;
  font-weight: 400;
  letter-spacing: 1px;
  color: #2196f3;
  line-height: 1.1em;
}
.testimonialBox .details h3 span {
  font-size: 12px;
  color: #666;
}
.swiper-container-3d .swiper-slide-shadow-left,
.swiper-container-3d .swiper-slide-shadow-right {
  background-image: none;
}
.content {
  text-align: left;
  font-size: 13px;
}

.r-link {
  display: var(--rLinkDisplay, inline-flex) !important;
}

.r-link[href] {
  color: var(--rLinkColor) !important;
  text-decoration: var(--rLinkTextDecoration, none) !important;
}

.r-button {
  background-color: var(--rButtonBackgroundColor, transparent) !important;
  padding: var(
    --rButtonPadding,
    var(--rButtonPaddingTop, 0) var(--rButtonPaddingRight, 0)
      var(--rButtonPaddingBottom, 0) var(--rButtonPaddingLeft, 0)
  ) !important;

  border-width: var(
    --rButtonBorderWidth,
    var(--rButtonBorderTopWidth, 0) var(--rButtonBorderRightWidth, 0)
      var(--rButtonBorderBottomWidth, 0) var(--rButtonBorderLeftWidth, 0)
  ) !important;
  border-style: var(--rButtonBorderStyle, solid) !important;
  border-color: var(--rButtonBorderColor, currentColor) !important;

  font-family: var(--rButtonFontFamily, inherit) !important;
  font-size: var(--rButtonFontSize, 1em) !important;
  color: var(--rButtonColor, currentColor) !important;
  text-align: var(--rButtonTextAlign, center) !important;
  text-transform: var(--rButtonTextTransform, inherit) !important;

  text-shadow: var(--rButtonTextShadow, none) !important;
  display: var(--rButtonDisplay, inline-flex) !important;
}

/*
=====
OUTLINED TEXT
=====
*/

/* 
basic
*/

.text-outlined {
  --uiTextOutlinedWeight: var(--textOutlinedWeight, 2px);
  --uiTextOutlinedLineColor: var(--textOutlinedLineColor, currentColor);

  position: var(--textOutlinedPosition, relative);
}

.text-outlined__label {
  display: var(--textOutlinedLabelDisplay, block);
}

.text-outlined::before,
.text-outlined::after,
.text-outlined__label::before,
.text-outlined__label::after {
  content: "";
  background-color: var(--uiTextOutlinedLineColor);
  position: absolute;
}

.text-outlined::before,
.text-outlined::after {
  width: 100%;
  height: var(--uiTextOutlinedWeight);
  left: 0;
}

.text-outlined__label::before,
.text-outlined__label::after {
  width: var(--uiTextOutlinedWeight);
  height: 100%;
  top: 0;
}

.text-outlined::before {
  top: 0;
}

.text-outlined::after {
  bottom: 0;
}

.text-outlined__label::before {
  left: 0;
}

.text-outlined__label::after {
  right: 0;
}

/*
adapters
*/

.text-outlined:not(.r-link):not(.r-button) {
  display: var(--textOutlinedDisplay, inline-flex);
  color: var(--textOutlinedColor, currentColor);
}

.text-outlined.r-link[href] {
  --rLinkDisplay: var(--textOutlinedDisplay);
  --rLinkColor: var(--textOutlinedColor, currentColor);
}

.text-outlined:not(.r-button) {
  padding: var(--textOutlinedPadding, 0.25rem);
}

.text-outlined.r-button:not(:disabled) {
  --rButtonColor: var(--textOutlinedColor, currentColor);
  --rButtonPadding: var(--textOutlinedPadding, 0.25rem);
}

/* 
text-outlined extension

1. 
The transition property isn't used because there are limits of the 
transition property syntax, particularly multiple values can't be used. 
*/

.text-outlined {
  --uiTextOutlineLineTransitionPropertyDefault: var(
    --textOutlineLineTransitionPropertyDefault,
    transform,
    opacity
  );
  --uiTextOutlineLineTransitionDurationDefault: var(
    --textOutlineLineTransitionDurationDefault,
    0.2s,
    0.15s
  );
  --uiTextOutlineLineTransitionTimingFunctionDefault: var(
    --textOutlineLineTransitionTimingFunctionDefault,
    ease-out
  );
  --uiTextOutlineLineTransitionDelayDefault: var(
    --textOutlineLineTransitionDelayDefault,
    0s,
    0.15s
  );
  --uiTextOutlineLineWillChangeDefault: var(
    --textOutlineLineWillChangeDefault,
    transform,
    opacity
  );

  overflow: hidden;
}

.text-outlined::before {
  transform: var(--textOutlineTopLineTransform, translate3d(-105%, 0, 0));
  transition-property: var(
    --textOutlineTopLineTransitionProperty,
    var(--uiTextOutlineLineTransitionPropertyDefault)
  ); /* 1 */
  transition-duration: var(
    --textOutlineTopLineTransitionDuration,
    var(--uiTextOutlineLineTransitionDurationDefault)
  ); /* 1 */
  transition-timing-function: var(
    --textOutlineTopLineTransitionTimingFunction,
    var(--uiTextOutlineLineTransitionTimingFunctionDefault)
  ); /* 1 */
  transition-delay: var(
    --textOutlineTopLineTransitionDelay,
    var(--uiTextOutlineLineTransitionDelayDefault)
  ); /* 1 */
  will-change: var(
    --textOutlineTopLineWillChange,
    var(--uiTextOutlineLineWillChangeDefault)
  );
}

.text-outlined::after {
  transform: var(--textOutlineBottomLineTransform, translate3d(105%, 0, 0));
  transition-property: var(
    --textOutlineBottomLineTransitionProperty,
    var(--uiTextOutlineLineTransitionPropertyDefault)
  ); /* 1 */
  transition-duration: var(
    --textOutlineBottomLineTransitionDuration,
    var(--uiTextOutlineLineTransitionDurationDefault)
  ); /* 1 */
  transition-timing-function: var(
    --textOutlineBottomLineTransitionTimingFunction,
    var(--uiTextOutlineLineTransitionTimingFunctionDefault)
  ); /* 1 */
  transition-delay: var(
    --textOutlineBottomLineTransitionDelay,
    var(--uiTextOutlineLineTransitionDelayDefault)
  ); /* 1 */
  will-change: var(
    --textOutlineBottomLineWillChange,
    var(--uiTextOutlineLineWillChangeDefault)
  );
}

.text-outlined__label::before {
  transform: var(--textOutlineLeftLineTransform, translate3d(0%, -100%, 0));
  transition-property: var(
    --textOutlineLeftLineTransitionProperty,
    var(--uiTextOutlineLineTransitionPropertyDefault)
  ); /* 1 */
  transition-duration: var(
    --textOutlineLeftLineTransitionDuration,
    var(--uiTextOutlineLineTransitionDurationDefault)
  ); /* 1 */
  transition-timing-function: var(
    --textOutlineLeftLineTransitionTimingFunction,
    var(--uiTextOutlineLineTransitionTimingFunctionDefault)
  ); /* 1 */
  transition-delay: var(
    --textOutlineLeftLineTransitionDelay,
    var(--uiTextOutlineLineTransitionDelayDefault)
  ); /* 1 */
  will-change: var(
    --textOutlineLeftLineWillChange,
    var(--uiTextOutlineLineWillChangeDefault)
  );
}

.text-outlined__label::after {
  transform: var(--textOutlineRightLineTransform, translate3d(0%, 100%, 0));
  transition-property: var(
    --textOutlineRightLineTransitionProperty,
    var(--uiTextOutlineLineTransitionPropertyDefault)
  ); /* 1 */
  transition-duration: var(
    --textOutlineRightLineTransitionDuration,
    var(--uiTextOutlineLineTransitionDurationDefault)
  ); /* 1 */
  transition-timing-function: var(
    --textOutlineRightLineTransitionTimingFunction,
    var(--uiTextOutlineLineTransitionTimingFunctionDefault)
  ); /* 1 */
  transition-delay: var(
    --textOutlineRightLineTransitionDelay,
    var(--uiTextOutlineLineTransitionDelayDefault)
  ); /* 1 */
  will-change: var(
    --textOutlineRightLineWillChange,
    var(--uiTextOutlineLineWillChangeDefault)
  );
}

.text-outlined::before,
.text-outlined::after,
.text-outlined__label::before,
.text-outlined__label::after {
  opacity: 0;
}

.text-outlined:hover::before,
.text-outlined:hover::after,
.text-outlined:hover .text-outlined__label::before,
.text-outlined:hover .text-outlined__label::after {
  opacity: 1;
}

/*
modifiers
*/

.text-outlined_v1:hover,
.text-outlined_v5:hover {
  --textOutlineTopLineTransform: translate3d(0, 0, 0);
  --textOutlineRightLineTransform: translate3d(0 0, 0);
  --textOutlineBottomLineTransform: translate3d(0, 0, 0);
  --textOutlineLeftLineTransform: translate3d(0, 0, 0);

  --textOutlineTopLineTransitionDuration: 0.25s;
  --textOutlineRightLineTransitionDuration: 0.25s;
  --textOutlineBottomLineTransitionDuration: 0.25s;
  --textOutlineLeftLineTransitionDuration: 0.25s;

  --textOutlineTopLineTransitionDelay: 0s;
  --textOutlineRightLineTransitionDelay: 0s;
  --textOutlineBottomLineTransitionDelay: 0s;
  --textOutlineLeftLineTransitionDelay: 0s;
}

.text-outlined_v5 {
  --textOutlineTopLineTransform: translate3d(-100%, 0, 0);
  --textOutlineRightLineTransform: translate3d(0, -100%, 0);
  --textOutlineBottomLineTransform: translate3d(100%, 0, 0);
  --textOutlineLeftLineTransform: translate3d(0, 100%, 0);
}

.text-outlined_v6 {
  --textOutlineTopLineTransform: translate3d(-105%, 0, 0);
  --textOutlineRightLineTransform: translate3d(0, -105%, 0);
  --textOutlineBottomLineTransform: translate3d(105%, 0, 0);
  --textOutlineLeftLineTransform: translate3d(0, 105%, 0);

  --textOutlineTopLineTransitionDuration: 0.2s;
  --textOutlineRightLineTransitionDuration: 0.2s;
  --textOutlineBottomLineTransitionDuration: 0.2s;
  --textOutlineLeftLineTransitionDuration: 0.2s;

  --textOutlineTopLineTransitionDelay: 0.35s;
  --textOutlineRightLineTransitionDelay: 0.25s;
  --textOutlineBottomLineTransitionDelay: 0.15s;
  --textOutlineLeftLineTransitionDelay: 0s;
}

.text-outlined_v6:hover {
  --textOutlineTopLineTransform: translate3d(0, 0, 0);
  --textOutlineRightLineTransform: translate3d(0 0, 0);
  --textOutlineBottomLineTransform: translate3d(0, 0, 0);
  --textOutlineLeftLineTransform: translate3d(0, 0, 0);

  --textOutlineTopLineTransitionDelay: 0s;
  --textOutlineRightLineTransitionDelay: 0.15s;
  --textOutlineBottomLineTransitionDelay: 0.25s;
  --textOutlineLeftLineTransitionDelay: 0.35s;
}

:root {
  --textOutlinedWeight: 5px;
  --textOutlinedLineColor: #243aab;
  --textOutlinedPadding: 1rem 1.25rem;
  --textUnderlinedLineHeight: 5px;
  --textUnderlinedLineGap: 0.25rem;
  --textUnderlinedLineColor: #243aab;
  --textFlatBackgroundColor: #243aab;
  --textFlatPadding: 0.75rem;
}

.text-flat {
  --linkTextColorHover: #fff;
}

/*
=====
DEMO
=====
*/

body {
  /* font-family: -apple-system, BlinkMacSystemFont, "Roboto", "Open Sans",
    "Helvetica Neue", "Segoe UI", "Arial", sans-serif; */
  margin: 0;
  color: #243aab;
}

/* @media (min-width: 768px) {
  body {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
  }
} */

.section {
  /* display: flex; */
  /* min-height: 300px; */
  text-align: center;

  font-weight: 700;
  text-transform: uppercase;
}

.section:nth-child(odd) {
  background-color: #f1f4fa;
}

.section__item {
  margin: auto;
}

.section__item > * {
  margin: 0.25rem;
}
